spring.application.name=TOEIC-Rise
# Database Configuration
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# Hibernate properties
# ddl-auto=none means that Hibernate will not attempt to create or update the database schema.
# This is useful when you want to manage the schema manually or use a tool like Flyway or Liquibase.
spring.jpa.hibernate.ddl-auto=none
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
# Multipart file upload configuration
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
spring.servlet.multipart.file-size-threshold=1MB
# JWT secret key
security.jwt.secret-key=${JWT_SECRET_KEY}
security.jwt.expiration-time=3600000
security.jwt.refresh-token.expiration=86400000
# Mail properties
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${SUPPORT_EMAIL}
spring.mail.password=${APP_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
# Spring AI Configuration for Google Gemini
spring.ai.openai.chat.base-url=https://generativelanguage.googleapis.com
spring.ai.openai.chat.completions-path=/v1beta/openai/chat/completions
spring.ai.openai.api-key=${GOOGLE_API_KEY}
spring.ai.openai.chat.options.model=gemini-2.0-flash
#Swagger
springdoc.swagger-ui.path=/swagger-ui.html
# OAuth2 Configuration for Google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
#Redis
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
#FE Callback URL
frontend.callback-url=${FRONTEND_CALLBACK_URL}
spring.flyway.locations=classpath:db/migration
# Enable baseline on migrate to handle existing schema
# This is useful when the database already has a schema that Flyway did not create.
spring.flyway.baseline-on-migrate=true
# Set the baseline version to the current version of the schema
spring.flyway.baseline-version=0
# Cloudinary Configuration
cloudinary.cloud_name=${CLOUDINARY_CLOUD_NAME}
cloudinary.api_key=${CLOUDINARY_API_KEY}
cloudinary.api_secret=${CLOUDINARY_API_SECRET}